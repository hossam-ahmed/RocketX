@import "form-controls-variables";

.#{$prefix}-control {
    max-width: 100%;
    @extend .relative, .in-block, .txt_grey_clr-1;

    > .#{$prefix}-input, %#{$prefix}-input {
        padding: 0 $control-horiz-padd;
        height: $control-height;
        font: normal .8em $basic-font;
        line-height: $control-line-height - $custom-font-baseshift;
        margin: 0;
        outline: none;
        @extend .bg_white-clr, .border-box, .block, .full-width, .simple-mono-transition;

        &:focus, &:hover {
            box-shadow: 0 2px 5px rgba(0,0,0,.2);
        }

        &[disabled], %#{$prefix}-input-disabled {
            cursor: not-allowed;

            &, ~ .#{$prefix}-control-icon {
                opacity: .6;
            }

            &:hover, &:focus, &:active {
                box-shadow: none;
            }
        }

        @if ($is-bordered) {
            border: $border-width $border-style;
            border-bottom-width: $border-bottom-width;
        }

        @if ($is-bordered!=true) {
            border: none;
        }

        @if ($is-cornered) {
            border-radius: $border-radius;
        }
    }

    > .#{$prefix}-control-icon {
        @extend .hide;
    }

    > .in_progress-icon {
        opacity: 0;
        visibility: hidden;
        @extend %icon_fw-control-iconed, %icon_fw-control-iconed_end_icon;
    }

    > .#{$prefix}-input, > .#{$prefix}-control-icon {
        @extend .simple-mono-transition;
    }

    > textarea.#{$prefix}-input {
        height: $textarea-height;
    }

    > input[type="text"], input[type="password"], input[type="email"], input[type="button"], input[type="number"], button {
        &.#{$prefix}-input {
            padding-bottom: $custom-font-baseshift;
        }
    }

    &.iconed {
        > .#{$prefix}-input {
            @include padd-start($icon-shift*2 + $icon-size);
        }

        > .#{$prefix}-control-icon, %icon_fw-control-iconed {
            font-size: 1.3em;
            pointer-events: none;
            @include start($icon-shift);
            z-index: 10;
            @extend .center-vert, .block;
        }

        &.end-icon {
            > .#{$prefix}-input {
                @include padd-start($control-horiz-padd);
                @include padd-end($icon-shift*2 + $icon-size);
            }

            > .#{$prefix}-control-icon, %icon_fw-control-iconed_end_icon {
                @include end($icon-shift);
                @include start(auto);
            }
        }
    }
    // Buttons
    &[role="button"] {
        > .#{$prefix}-btn, > .fw-btn {
            cursor: default;
            @extend .txt-center;
        }

        @if ($use-default) {
            // Default Button
            &, &.default-btn {
                @include generate-button($type: default);
            }
            // Primary Button
            &.primary-btn {
                @include generate-button(map-get($theme-colors, primary), map-get($theme-colors, primary), $type: primary);
            }
            // Success Button
            &.success-btn {
                @include generate-button(map-get($theme-colors, success), map-get($theme-colors, success), $type: success);
            }
            // Caution Button
            &.caution-btn {
                @include generate-button(map-get($theme-colors, caution), map-get($theme-colors, caution));
            }
            // Warning Button
            &.warning-btn {
                @include generate-button(map-get($theme-colors, warning), map-get($theme-colors, warning), $type: warning);
            }
            // Danger Button
            &.danger-btn {
                @include generate-button(map-get($theme-colors, danger), map-get($theme-colors, danger), $type: danger);
            }
            // Grey Button
            &.grey-btn {
                @include generate-button($border-color, map-get($grey-shadows, 1));
            }
            // Dark Button
            &.dark-btn {
                @include generate-button(#222, #fff, #fff, map-get($grey-shadows, 1), #fff, map-get($grey-shadows, 1));
            }
            //Transparent Button
            &.trans-btn {
                @include generate-button(transparent, map-get($grey-shadows, 2), map-get($grey-shadows, 1), transparent, map-get($grey-shadows, 1), #eee, true, trans);
            }
            // White Button
            &.white-btn {
                @include generate-button(#fff, map-get($grey-shadows, 2), map-get($grey-shadows, 1), #fff, map-get($grey-shadows, 1), #eee, true);
            }
        }
        // In Progress Button
        &.in-progress {
            & > .#{$prefix}-btn, &.icon-btn > .#{$prefix}-btn {
                @include padd-start($control-horiz-padd);
                @include padd-end(65px);
            }

            > .in_progress-icon {
                opacity: 1;
                visibility: visible;
                top: calc(50% - 3px);

                > div {
                    $size: 8px;
                    width: $size;
                    height: $size;
                }
            }

            &.iconed {
                & > .#{$prefix}-control-icon, &.end-icon > .#{$prefix}-control-icon {
                    @extend .hide;
                }
            }
        }
        // Icon Button
        &.icon-btn {
            > .#{$prefix}-btn {
                padding-right: 10px;
                padding-left: 10px;
            }
        }
    }
    // TextBox
    &[role="textbox"] {
        min-width: 200px;

        > .#{$prefix}-field {
            cursor: text;
            border-color: $border-color;

            &[disabled] {
                cursor: default;
            }
        }
    }
    // ComboBox
    &[role="combobox"] {
        > .#{$prefix}-dropdown-backdrop {
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: 1000;
            /*background-color: rgba(0,0,0,.3);*/
            @extend .fixed;
        }

        .#{$prefix}-control {
            &.iconed {
                > .#{$prefix}-control-icon {
                    font-size: 1em;
                }
            }
        }

        .#{$prefix}-dropdown-list {
            @if ($is-cornered) {
                border-radius: $border-radius-regular;
            }

            top: 100%;
            border: $border-width $border-style $border-color;
            border-bottom-width: $border-bottom-width;
            box-shadow: 0 2px 5px rgba(0,0,0,.2);
            opacity: 0;
            visibility: hidden;
            margin: -2px 0 20px;
            min-width: 100%;
            max-width: 300px;
            max-height: 300px;
            overflow: hidden;
            position: absolute !important; // Add important to overwrite inline styles by the scrollbar plugin
            z-index: 1005;
            @extend .bg_white-clr, .padd-v10, .border-box, .simple-mono-transition;

            .list-item {
                -moz-transform: translateY(-100px);
                -ms-transform: translateY(-100px);
                -o-transform: translateY(-100px);
                -webkit-transform: translateY(-100px);
                transform: translateY(-100px);
                @extend .simple-mono-transition;

                .item-link {
                    font-size: 0.775em;
                    padding: 5px 10px;
                    @include padd-all(5px, 30px, 5px, 10px);
                    @extend .txt_grey_clr-1, .block, .simple-mono-transition, .three-dots, .relative !optional;

                    &:hover, &.hovered {
                        background-color: #eee;
                    }

                    &:active, &.active {
                        @extend .txt_default-clr !optional;
                    }

                    &:before {
                        border-radius: 50%;
                        padding: 3px;
                        font-size: .8em;
                        @include end(-50px);
                        box-shadow: 0 0 0 2px darken(map-get($theme-colors, default), 10%), 0 0 0 3px #fff;
                        @extend .bg_white-clr, .txt_default-clr, .center-vert, .simple-mono-transition, .font-icon, .icon-check:before;
                    }
                }

                &.selected {
                    .item-link {
                        background-color: darken(map-get($theme-colors, default), 10%);
                        @include padd-end(45px);
                        @extend .txt_white !optional;

                        &:before {
                            @include end(20px);
                        }
                    }
                }
            }

            &.expanded {
                opacity: 1;
                visibility: visible;

                .list-item {
                    -moz-transform: translateY(0);
                    -ms-transform: translateY(0);
                    -o-transform: translateY(0);
                    -webkit-transform: translateY(0);
                    transform: translateY(0);
                }
            }
        }

        &.opened {
            .#{$prefix}-control {
                z-index: 1004;
            }
        }
    }
    // Content Info Readonly Field
    &[role="contentinfo"] {
        /*.border-radius-all(0, @border-radius-regular, @border-radius-regular, @border-radius-regular);*/
        font: 500 .9em $basic-font;
        @extend .clearfix, .txt_grey_clr-4 !optional;

        > .#{$prefix}-label {
            max-width: 100%;
            padding: 5px;
            @extend .in-block, .pull-start;
        }
    }
}

.#{$prefix}-group[role="group"] {
    @extend .relative, .in-table;

    .#{$prefix}-control {
        @extend .table-cell;

        &:first-of-type {
            z-index: 10;

            &:not(:last-of-type) {
                > .#{$prefix}-input {
                    @if ($is-cornered) {
                        @include border-radius-all($border-radius-regular, 0, 0, $border-radius-regular);
                    }
                }
            }

            &:last-of-type {
                > .#{$prefix}-input {
                    @if ($is-cornered) {
                        border-radius: $border-radius-regular;
                    }
                }
            }
        }

        + .#{$prefix}-control {
            &:not(:last-of-type) {
                > .#{$prefix}-input {
                    border-radius: 0;
                }
            }

            > .#{$prefix}-input {
                @include border-start(0);
                @include mr-start(-1px);
            }

            &:last-of-type {
                > .#{$prefix}-input {
                    @if ($is-cornered) {
                        @include border-radius-all(0, $border-radius-regular, $border-radius-regular, 0);
                    }
                }
            }
        }
    }

    &.fixed-group {
        @extend .fixed-table;
    }
}
