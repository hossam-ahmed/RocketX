.#{$prefix}-form[role="form"] {
    @extend .table-layout-sm, .full-width, .relative, .fixed-table;

    > .#{$prefix}-form-row[role="row"] {
        @extend .table-row, .block-xs;

        > .#{$prefix}-form-cell[role="gridcell"] {
            @extend .table-cell, .block-xs, .relative, .padd-10;
            max-width: 0;

            .cell-label {
                font: normal .8em $basic-font;
                margin-bottom: 5px;
                @extend .txt_grey_clr-2 !optional;

                &.required {
                    @extend .txt_danger-clr !optional;
                    /*~ .cell-control {
                        .#{$prefix}-control {
                            &[role="textbox"], &[role="combobox"] {
                                &:after {
                                    top: -14px;
                                    font-size: .8em;
                                    visibility: hidden;
                                    z-index: -1;
                                    .start(0);
                                    @extend .icon-asterisk:before, .font-icon, .txt_danger-clr, .absolute);
                                }
                            }
                        }
                    }*/
                    &:before {
                        font-size: .8em;
                        vertical-align: 0;
                        @include mr-end(5px);
                        @extend .font-icon, .icon-asterisk:before;
                    }
                }
            }

            .cell-control {
                > .#{$prefix}-control {
                    @extend .block;

                    > .#{$prefix}-req-val {
                        top: 7px;
                        font-size: 1.1em;
                        pointer-events: none;
                        z-index: 15;
                        @include end(10px);
                        @extend .absolute, .simple-mono-transition, .txt_danger-clr;
                        // to be able to work with server side validators
                        &[style*="visible"], &[style*="inline"] {
                            /* Adding Bootstrap selectors*/
                            ~ .#{$prefix}-input, ~ .bootstrap-select.btn-group > .btn {
                                @if ($gen-is-bordered) {
                                    border-color: map-get($theme-colors, error);
                                }

                                @include padd-end(30px);

                                ~ .#{$prefix}-control-state {
                                    @if ($gen-is-bordered) {
                                        border-color: map-get($theme-colors, error);
                                    }
                                }
                            }
                            /* Adding Bootstrap selectors */
                            ~ .#{$prefix}-control-icon, ~ .bootstrap-select.btn-group .dropdown-toggle .caret:before {
                                background-color: map-get($theme-colors, error);
                                @extend .txt_white-clr !optional;
                            }

                            ~ .custom-input[role="checkbox"], ~ .custom-input[role="radio"] {
                                .toggler-input {
                                    ~ .toggler-state {
                                        @if ($gen-is-bordered) {
                                            border-color: map-get($theme-colors, error);
                                        }
                                    }
                                }
                            }

                            &:after {
                                content: attr(data-msg);
                                padding: 5px;
                                bottom: calc(100% + 12px);
                                white-space: nowrap;
                                font: normal .6em/1em $basic-font;
                                background: map-get($grey-shadows, 1);

                                @if ($is-cornered) {
                                    border-radius: $border-radius-regular;
                                }

                                @include end(-10px);
                                @extend .block, .txt_white-clr, .absolute !optional;
                            }

                            &.not-labled {
                                &:after {
                                    @extend .hide;
                                }
                            }
                        }
                    }

                    &.end-icon {
                        > .#{$prefix}-req-val {
                            @include end(45px);

                            &[style*="visible"], &[style*="inline"] {
                                ~ .#{$prefix}-input {
                                    @include padd-end(60px);
                                }

                                &:after {
                                    @include end(-45px);
                                }
                            }
                        }
                    }
                    // note: when we use &.in-block, SASS understand this as if it has class in-block OR extend the class in-block, and as it extends that class already, it will always be inline-block, so we use the class attribute.
                    &[class*="in-block"] {
                        display: inline-block;
                    }

                    &[role="combobox"] {
                        > .bootstrap-select {
                            &.btn-group {
                                .dropdown-menu {
                                    max-width: 100%;
                                }
                            }
                        }
                    }
                }

                .#{$prefix}-control-hint {
                    font: normal .8em $basic-font;
                    @extend .block, .mr-t10, .txt_grey_clr-4 !optional;
                }

                .#{$prefix}-rgx-val {
                    font: bold .8em $basic-font;
                    @extend .mr-t10, .block, .txt_danger-clr !optional;

                    &:before {
                        font-size: 17px;
                        vertical-align: -2px;
                        @extend .font-icon, .icon-error:before !optional;
                        @include mr-end(10px);
                    }
                }
            }

            &:first-of-type {
                @include padd-start(0);
            }

            &:last-of-type {
                @include padd-end(0);
            }
        }

        + .#{$prefix}-form-row[role="row"] {
            > .#{$prefix}-form-cell[role="gridcell"] {
                padding-top: 0;
            }
        }
    }

    .form-section-title {
        display: table-caption;
        @extend .relative;

        .title-txt {
            font: bold .7em $basic-font;
            padding: 5px 20px;
            @include border-start(3px solid map-get($theme-colors, default));
            border-bottom: 1px solid #ddd;
            background-color: #fff;
            @extend .relative, .block, .clearfix, .txt_grey_clr-1 !optional;
        }
    }

    &:first-child {
        .form-section-title {
            @extend .mr-t20;
        }
    }

    &.top {
        > .#{$prefix}-form-row[role="row"] {
            > .#{$prefix}-form-cell[role="gridcell"] {
                vertical-align: top;
            }
        }
    }

    &.striped-form {
        .#{$prefix}-form-row {
            &[role="row"] {
                &:nth-child(even) {
                    background-color: map-get($grey-shadows, 0);
                }
            }
        }
    }
}
